{
    "lex": {
        "rules": [
           ["\\s+",                    "/* skip whitespace */"],
           ["[0-9]+(?:\\.[0-9]+)?",    "return 'NUMBER';"],
           ["'[^']*'",                 "return 'STRING';"],
           ["true|false",              "return 'BOOLEAN';"],
           ["\\*",                     "return '*';"],
           ["\\/",                     "return '/';"],
           ["-",                       "return '-';"],
           ["\\+",                     "return '+';"],
           ["\\^",                     "return '^';"],
           ["\\(",                     "return '(';"],
           [",",                       "return ',';"],
           ["\\)",                     "return ')';"],
           ["=",                       "return 'EQUALS';"],
           [":",                       "return 'LITERALCONTENTS';"],
           ["\\^",                     "return 'EXTENDS';"],
           ["->",                      "return 'EVENT';"],
           ["[#\\.][a-zA-Z0-9\\-]+",   "return 'selectorsegment';"],
           ["[>|]",                    "return 'SELECTORCOMBINATOR';"],
           ["$",                       "return 'EOF';"]
        ]
    },

    "operators": [
        ["left", "+", "-"],
        ["left", "*", "/"],
        ["left", "UMINUS"]
    ],

    "bnf": {
        "expressions" :[[ "aspects EOF",   "return `const A = require('../lib');\\n` + $1;"  ]],

        "aspects" :[[ "aspects aspect", "$$ = `${$1}\\n${$2}`;" ],
                    [ "aspect",         "$$ = `${$1}`;" ]],
        
        "aspect" :[[ "valueaspect", "$$ = $1;" ],
                   [ "eventaspect", "$$ = $1;" ]],

        "extensionaspect" :[[ "selector EXTENDS selector", "$$ = `A.addExtensionAspect({ selector: ${$1}, parentSelector: ${$3} });`" ]],
        "valueaspect" :[[ "selector EQUALS literal", "$$ = `A.addAspect({ selector: ${$1}, value: ${$3} })`;" ]],
        "eventaspect" :[[ "selector EVENT eventlistener", "$$ = TODO;" ]],

        "selector" :[[ "selector SELECTORCOMBINATOR selectorsegment", "$$ = `'${$1} ${$2} ${$3}'`;" ],
                     [ "selectorsegment", "$$ = `${$1}`;" ]],
        
        "literal" :[[ "selectorsegment", "$$ = `A.tokenized('${$1}')`" ],
                    [ "selectorsegment LITERALCONTENTS literalgroup", "/*{ type*/" ],
                    [ "selectorsegment LITERALCONTENTS literalprimitive", "" ],
                    [ "literalgroup", "$$ = `{ children: ${$1} }`;" ],
                    [ "literalprimitive", "$$ = `{ value: ${$1} }`;" ]],

        "literalgroup" :[[ "[literalsequence]", "$$ = `[ ${$1} ]`;" ]],
        "literalsequence" :[[ "literalsequence, literal", "$$ = `${$1}, ${$2}`;" ],
                            [ "literal",                  "$$ = `${$1}`;" ]],
        "literalprimitive" :[[ "NUMBER", "$$ = $1;" ],
                             [ "STRING", "$$ = $1;" ],
                             [ "BOOLEAN", "$$ = $1;" ]],

        "e" :[[ "e + e",   "$$ = $1 + $3;" ],
              [ "e - e",   "$$ = $1 - $3;" ],
              [ "e * e",   "$$ = $1 * $3;" ],
              [ "e / e",   "$$ = $1 / $3;" ],
              [ "e ^ e",   "$$ = Math.pow($1, $3);" ],
              [ "- e",     "$$ = -$2;", {"prec": "UMINUS"} ],
              [ "( e )",   "$$ = $2;" ],
              [ "NUMBER",  "$$ = Number(yytext);" ],
              [ "E",       "$$ = Math.E;" ],
              [ "PI",      "$$ = Math.PI;" ]]
    }
}